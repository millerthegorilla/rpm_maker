#!/bin/bash
PROJ_ROOT="$(pwd)"
TMP_DIR="./tmp"
GETPKGS="$PROJ_ROOT/scripts/getpkgurls.py"
DEB_URLS="$PROJ_ROOT/lists/deburls.list"
filename=$DEB_URLS
ARCH="amd64"
TEAM="kxstudio-debian"
PPA="plugins"
CLEAN=false
CLEAN_SRC=true
DEBS_ONLY=false

export DEBS_ONLY
export PROJ_ROOT
export ARCH
export TEAM
export PPA
export PACKAGE
export CLEAN_SRC

if [ ! -d "$TMP_DIR" ]; then
  mkdir -p $TMP_DIR
fi

if [ ! -d "./log" ]; then
  mkdir -p "./log"
fi

if [ ! -e "./log/getpkgurls.log" ]; then
	touch "./log/getpkgurls.log"
fi

packages()
{
	if [ -s "$PROJ_ROOT/lists/urls-for-lynx.list" ]; then
		mv "$PROJ_ROOT/lists/urls-for-lynx.list" "$PROJ_ROOT/lists/urls-for-lynx.list.old"
	fi
	python3 $GETPKGS
}

lynxdump()
{
	$PROJ_ROOT/scripts/lynxdump.sh
}

rpmbuild()
{
	echo "Building RPMS from list at $PROJ_ROOT$filename"
	cd $TMP_DIR
	$PROJ_ROOT/scripts/build_rpms.sh $filename
}

usage()
{
	echo "usage: rpm_maker <options>"
	echo "		-r | --rpmbuild filename - buildrpm from existing list"
	echo "					   where filename is optional listname>"
	echo "		-l | --lynxdump 	 - convert list of urls from launchpad"
	echo "					   to urls to debs"
	echo "		-g | --getpkgs		 - get list of pkgs from launchpad"
	echo "		-s | --setpkg	%pkg	 - set pkgname to download and convert"
	echo "		-p | --setppa	%ppa	 - set PPA to use for obtaining"
	echo "					   urllist from launchpad"
	echo "		-t | --setteam	%team	 - set Team to use for obtaining"
	echo "					   urllist from launchpad"
	echo "		-a | --arch	%arch	 - specify the architecture amd64 | x386"
	echo "		-d | --debs		 - download the debs files but do not"
	echo "					   process them with alien etc.  Default is false"
	echo "		-c | --clean		 - clean the tmp directory of build"
	echo "					   files etc when rpm_maker is finished"
	echo "		-x | --cleansrc		 - clean the build sources and deb files"
	echo "					   defaults to true"
	echo "		________________________________________________________________"
	echo "		no parameters will download debs and build them into ./tmp/rpms"
}

while [ "$1" != "" ]; do
    case $1 in
        -r | --rpmbuild )       shift
				if [ "$1" != '' ]; then
                                	filename=$1
				fi
				rpmbuild
				exit
                                ;;
	-l | --lynxdump )	lynxdump
				exit
				;;
	-g | --getpkgs )	packages
				exit
				;;
	-s | --setpkgs )	shift
				if [ "$1" != '' ]; then
                                        PACKAGE=$1
                                        export PACKAGE
                                fi
                                ;;
	-t | --setteam )	shift
				if [ "$1" != '' ]; then
                                        TEAM=$1
					export TEAM
				fi
				;;
	-p | --setppa )		shift
				if [ "$1" != '' ]; then
                                        PPA=$1
					export PPA
				fi
				;;
	-a | --setarch )	shift
				if [ "$1" != '' ]; then
                                        ARCH=$1
					export ARCH
				fi
				;;
	-c | --clean )		shift
				if [ "$1" = '' ]; then
					CLEAN=true
				else
					CLEAN=$1
				fi
				;;
	-x | --cleansrc )	shift
				if [ "$1" = '' ]; then
					CLEAN_SRC=true
				else
					CLEAN_SRC=$1
				fi
				export CLEAN_SRC
				;;
	-d | --debs )		DEBS_ONLY=true
				export DEBS_ONLY
				;;
        -h | --help )           usage
                                exit 1
                                ;;
        * )                     usage
                                exit 1
    esac
    shift
done

packages
RET=$?
if [ $RET -eq 0 ]; then
	lynxdump
else
	echo "package urls failed to download with an exit code of $RET"
	exit $RET
fi
RET=$?
if [ $RET -eq 0 ]; then
	rpmbuild
else
	echo "lynxdump script failed with an exit code of $RET"
	exit $RET
fi
RET=$?
if [ $RET -ne 0 ]; then
	echo "rpmbuild script failed with an exit code of $RET"
	exit $RET
fi
if [ $CLEAN = true ]; then
	sudo rm -rf tmp/*
fi
exit 0
